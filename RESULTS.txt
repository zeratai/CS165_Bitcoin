Part 1:
Running 7 total tests.

Test 1: test isValidTx() with valid transactions
==> passed

Test 2: test isValidTx() with transactions containing signatures of incorrect data
==> passed

Test 3: test isValidTx() with transactions containing signatures using incorrect private keys
==> passed

Test 4: test isValidTx() with transactions whose total output value exceeds total input value
==> passed

Test 5: test isValidTx() with transactions that claim outputs not in the current utxoPool
==> passed

Test 6: test isValidTx() with transactions that claim the same UTXO multiple times
==> passed

Test 7: test isValidTx() with transactions that contain a negative output value
==> passed


Total: 7/7 tests passed!

Running 8 total tests.

Test 1: test handleTransactions() with simple and valid transactions
Total Transactions = 2
Number of transactions returned valid by student = 2
Total Transactions = 50
Number of transactions returned valid by student = 50
Total Transactions = 100
Number of transactions returned valid by student = 100
==> passed

Test 2: test handleTransactions() with simple but some invalid transactions because of invalid signatures
Total Transactions = 2
Number of transactions returned valid by student = 0
Total Transactions = 50
Number of transactions returned valid by student = 1
Total Transactions = 100
Number of transactions returned valid by student = 1
==> passed

Test 3: test handleTransactions() with simple but some invalid transactions because of inputSum < outputSum
Total Transactions = 2
Number of transactions returned valid by student = 1
Total Transactions = 50
Number of transactions returned valid by student = 18
Total Transactions = 100
Number of transactions returned valid by student = 41
==> passed

Test 4: test handleTransactions() with simple and valid transactions with some double spends
Total Transactions = 2
Number of transactions returned valid by student = 1
Total Transactions = 50
Number of transactions returned valid by student = 23
Total Transactions = 100
Number of transactions returned valid by student = 43
==> passed

Test 5: test handleTransactions() with valid but some transactions are simple, some depend on other transactions
Total Transactions = 2
Number of transactions returned valid by student = 1
Total Transactions = 50
Number of transactions returned valid by student = 26
Total Transactions = 100
Number of transactions returned valid by student = 94
==> passed

Test 6: test handleTransactions() with valid and simple but some transactions take inputs from non-exisiting utxo's
Total Transactions = 2
Number of transactions returned valid by student = 1
Total Transactions = 50
Number of transactions returned valid by student = 10
Total Transactions = 100
Number of transactions returned valid by student = 59
==> passed

Test 7: test handleTransactions() with complex Transactions
Total Transactions = 2
Number of transactions returned valid by student = 0
Total Transactions = 50
Number of transactions returned valid by student = 12
Total Transactions = 100
Number of transactions returned valid by student = 20
==> passed

Test 8: test handleTransactions() with simple, valid transactions being called again to check for changes made in the pool
Total Transactions = 2
Number of transactions returned valid by student = 2
Total Transactions = 50
Number of transactions returned valid by student = 49
Total Transactions = 100
Number of transactions returned valid by student = 46
==> passed


Total: 8/8 tests passed!

Part 2:

Running 27 total tests.

######################
processBlock() tests:
######################

Process a block with no transactions
==> passed

Process a block with a single valid transaction
==> passed

Process a block with many valid transactions
==> passed

Process a block with some double spends
==> passed

Process a new genesis block
==> passed

Process a block with an invalid prevBlockHash
==> passed

Process blocks with different sorts of invalid transactions
==> passed

Process multiple blocks directly on top of the genesis block
==> passed

Process a block containing a transaction that claims a UTXO already claimed by a transaction in its parent
==> passed

Process a block containing a transaction that claims a UTXO not on its branch
==> passed

Process a block containing a transaction that claims a UTXO from earlier in its branch that has not yet been claimed
==> passed

Process a linear chain of blocks
==> passed

Process a linear chain of blocks of length CUT_OFF_AGE and then a block on top of the genesis block
==> passed

Process a linear chain of blocks of length CUT_OFF_AGE + 1 and then a block on top of the genesis block
==> passed

######################
createBlock() tests:
######################

Create a block when no transactions have been processed
==> passed

Create a block after a single valid transaction has been processed
==> passed

Create a block after only invalid transactions have been processed
==> passed

Create a block after a valid transaction has been processed, then create a second block
==> passed

Create a block after a valid transaction has been processed that is already in a block in the longest valid branch
==> passed

Create a block after a valid transaction has been processed that uses a UTXO already claimed by a transaction in the longest valid branch
==> passed

Create a block after a valid transaction has been processed that is not a double spend on the longest valid branch and has not yet been included in any other block
==> passed

######################
Combination tests:
######################

Process a transaction, create a block, process a transaction, create a block, ...
==> FAILED

Process a transaction, create a block, then process a block on top of that block with a transaction claiming a UTXO from that transaction
==> passed

Process a transaction, create a block, then process a block on top of the genesis block with a transaction claiming a UTXO from that transaction
==> passed

Process multiple blocks directly on top of the genesis block, then create a block
==> passed

Construct two branches of approximately equal size, ensuring that blocks are always created on the proper branch
==> FAILED

Similar to previous test, but then try to process blocks whose parents are at height < maxHeight - CUT_OFF_AGE
==> FAILED


Total: 24/27 tests passed!